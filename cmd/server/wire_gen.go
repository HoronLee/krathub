// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/horonlee/krathub/internal/biz"
	"github.com/horonlee/krathub/internal/client"
	"github.com/horonlee/krathub/internal/conf"
	"github.com/horonlee/krathub/internal/data"
	"github.com/horonlee/krathub/internal/server"
	"github.com/horonlee/krathub/internal/server/middleware"
	"github.com/horonlee/krathub/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, discovery *conf.Discovery, registry *conf.Registry, confData *conf.Data, app *conf.App, trace *conf.Trace, metrics *conf.Metrics, logger log.Logger) (*kratos.App, func(), error) {
	registrar := server.NewRegistrar(registry)
	middlewareManager := middleware.NewMiddlewareManager(app)
	serverMetrics, err := server.NewMetrics(metrics, logger)
	if err != nil {
		return nil, nil, err
	}
	registryDiscovery := data.NewDiscovery(discovery)
	clientFactory, err := client.NewGrpcClientFactory(confData, trace, registryDiscovery, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, logger, clientFactory)
	if err != nil {
		return nil, nil, err
	}
	sayHelloRepo := data.NewSayHelloRepo(dataData, logger)
	sayHelloUsecase := biz.NewSayHelloUsecase(sayHelloRepo, logger, app)
	sayHelloService := service.NewSayHelloService(sayHelloUsecase)
	grpcServer := server.NewGRPCServer(confServer, trace, middlewareManager, serverMetrics, logger, sayHelloService)
	httpServer := server.NewHTTPServer(confServer, trace, middlewareManager, serverMetrics, logger)
	kratosApp := newApp(logger, registrar, grpcServer, httpServer)
	return kratosApp, func() {
		cleanup()
	}, nil
}
