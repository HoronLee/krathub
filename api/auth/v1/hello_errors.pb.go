// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package hellov1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户未找到
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 用户未找到
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 用户已存在
func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ALREADY_EXISTS.String() && e.Code == 400
}

// 用户已存在
func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 密码错误
func IsIncorrectPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INCORRECT_PASSWORD.String() && e.Code == 401
}

// 密码错误
func ErrorIncorrectPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_INCORRECT_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 错误的认证信息
func IsInvalidCredentials(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_CREDENTIALS.String() && e.Code == 401
}

// 错误的认证信息
func ErrorInvalidCredentials(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_INVALID_CREDENTIALS.String(), fmt.Sprintf(format, args...))
}

// Token 类型错误
func IsInvalidTokenType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_TOKEN_TYPE.String() && e.Code == 400
}

// Token 类型错误
func ErrorInvalidTokenType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_TOKEN_TYPE.String(), fmt.Sprintf(format, args...))
}

// Token 已过期
func IsTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_EXPIRED.String() && e.Code == 401
}

// Token 已过期
func ErrorTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 没有 Token
func IsMissingToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MISSING_TOKEN.String() && e.Code == 401
}

// 没有 Token
func ErrorMissingToken(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_MISSING_TOKEN.String(), fmt.Sprintf(format, args...))
}

// Token 生成失败
func IsTokenGenerationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_GENERATION_FAILED.String() && e.Code == 500
}

// Token 生成失败
func ErrorTokenGenerationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TOKEN_GENERATION_FAILED.String(), fmt.Sprintf(format, args...))
}

// 没有权限
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNAUTHORIZED.String() && e.Code == 403
}

// 没有权限
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}
