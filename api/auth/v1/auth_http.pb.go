// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: auth/v1/auth.proto

package authv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthHello = "/krathub.auth.v1.Auth/Hello"
const OperationAuthLoginByEmailPassword = "/krathub.auth.v1.Auth/LoginByEmailPassword"
const OperationAuthSignupByEmail = "/krathub.auth.v1.Auth/SignupByEmail"

type AuthHTTPServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	LoginByEmailPassword(context.Context, *LoginByEmailPasswordRequest) (*LoginByEmailPasswordReply, error)
	SignupByEmail(context.Context, *SignupByEmailRequest) (*SignupByEmailReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/CallHello/Hello", _Auth_Hello0_HTTP_Handler(srv))
	r.POST("/v1/auth/signup/using-email", _Auth_SignupByEmail0_HTTP_Handler(srv))
	r.POST("/v1/auth/login/using-email-password", _Auth_LoginByEmailPassword0_HTTP_Handler(srv))
}

func _Auth_Hello0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResponse)
		return ctx.Result(200, reply)
	}
}

func _Auth_SignupByEmail0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SignupByEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthSignupByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignupByEmail(ctx, req.(*SignupByEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SignupByEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_LoginByEmailPassword0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByEmailPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthLoginByEmailPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByEmailPassword(ctx, req.(*LoginByEmailPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginByEmailPasswordReply)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	Hello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloResponse, err error)
	LoginByEmailPassword(ctx context.Context, req *LoginByEmailPasswordRequest, opts ...http.CallOption) (rsp *LoginByEmailPasswordReply, err error)
	SignupByEmail(ctx context.Context, req *SignupByEmailRequest, opts ...http.CallOption) (rsp *SignupByEmailReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) Hello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloResponse, error) {
	var out HelloResponse
	pattern := "/CallHello/Hello"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthHTTPClientImpl) LoginByEmailPassword(ctx context.Context, in *LoginByEmailPasswordRequest, opts ...http.CallOption) (*LoginByEmailPasswordReply, error) {
	var out LoginByEmailPasswordReply
	pattern := "/v1/auth/login/using-email-password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthLoginByEmailPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthHTTPClientImpl) SignupByEmail(ctx context.Context, in *SignupByEmailRequest, opts ...http.CallOption) (*SignupByEmailReply, error) {
	var out SignupByEmailReply
	pattern := "/v1/auth/signup/using-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthSignupByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
