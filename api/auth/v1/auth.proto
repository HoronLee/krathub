syntax = "proto3";

package auth.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "krathub/api/auth/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.auth.v1";
option java_outer_classname = "AuthProtoV1";

// 用户信息
message UserInfo {
  int64 id = 1;
  string name = 2; // 用户名
  string email = 3; // 用户邮箱
  string phone = 4; // 用户手机号
}

// 邮箱注册请求
message SignupByEmailRequest {
  string name = 1 [(validate.rules).string.min_len =  5]; // 用户名最小长度5
  // 密码最小长度5，最大长度10
  string password = 2 [(validate.rules).string = {min_len: 5, max_len: 10}];
  string password_confirm = 3 [
    (validate.rules).string = {min_len: 5, max_len: 10}
  ];  // 确认密码最小长度5，最大长度10
  string verify_code = 4 [(validate.rules).string.len = 6];
  string email = 5 [(validate.rules).string.email = true]; // 邮箱格式验证
  string phone = 6 [(validate.rules).string.len = 11]; // 手机号长度11位
}

// 邮箱注册响应
message SignupByEmailReply {
  UserInfo data = 1;
  string token = 2;
}

// 密码登录请求
message LoginByPasswordRequest {
  string login_id = 1; // 可以是用户名或邮箱
  string password = 2 [(validate.rules).string = {min_len: 5, max_len: 10}];
  string captcha_id = 3;
  string captcha_answer = 4;
}

// 密码登录响应
message LoginByPasswordReply {
  string token = 1;
}

service Auth {
  rpc SignupByEmail(SignupByEmailRequest) returns (SignupByEmailReply) {
    option (google.api.http) = {
      post: "/v1/auth/signup/using-email"
      body: "*"
    };
  }

  rpc LoginByPassword(LoginByPasswordRequest) returns (LoginByPasswordReply) {
    option (google.api.http) = {
      post: "/v1/auth/login/using-password"
      body: "*"
    };
  }
}