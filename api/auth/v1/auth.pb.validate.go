// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/auth/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Avatar

	// no validation rules for Bio

	// no validation rules for Location

	// no validation rules for Website

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on SignupByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignupByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignupByEmailRequestMultiError, or nil if none found.
func (m *SignupByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 5 {
		err := SignupByEmailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 5 || l > 10 {
		err := SignupByEmailRequestValidationError{
			field:  "Password",
			reason: "value length must be between 5 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPasswordConfirm()); l < 5 || l > 10 {
		err := SignupByEmailRequestValidationError{
			field:  "PasswordConfirm",
			reason: "value length must be between 5 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVerifyCode()) < 6 {
		err := SignupByEmailRequestValidationError{
			field:  "VerifyCode",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SignupByEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := SignupByEmailRequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SignupByEmailRequestMultiError(errors)
	}

	return nil
}

func (m *SignupByEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignupByEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignupByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by SignupByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type SignupByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupByEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupByEmailRequestMultiError) AllErrors() []error { return m }

// SignupByEmailRequestValidationError is the validation error returned by
// SignupByEmailRequest.Validate if the designated constraints aren't met.
type SignupByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupByEmailRequestValidationError) ErrorName() string {
	return "SignupByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignupByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupByEmailRequestValidationError{}

// Validate checks the field values on SignupByEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignupByEmailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupByEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignupByEmailReplyMultiError, or nil if none found.
func (m *SignupByEmailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupByEmailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignupByEmailReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignupByEmailReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignupByEmailReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return SignupByEmailReplyMultiError(errors)
	}

	return nil
}

// SignupByEmailReplyMultiError is an error wrapping multiple validation errors
// returned by SignupByEmailReply.ValidateAll() if the designated constraints
// aren't met.
type SignupByEmailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupByEmailReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupByEmailReplyMultiError) AllErrors() []error { return m }

// SignupByEmailReplyValidationError is the validation error returned by
// SignupByEmailReply.Validate if the designated constraints aren't met.
type SignupByEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupByEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupByEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupByEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupByEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupByEmailReplyValidationError) ErrorName() string {
	return "SignupByEmailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SignupByEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupByEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupByEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupByEmailReplyValidationError{}

// Validate checks the field values on LoginByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordRequestMultiError, or nil if none found.
func (m *LoginByPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginId

	// no validation rules for Password

	// no validation rules for CaptchaId

	// no validation rules for CaptchaAnswer

	if len(errors) > 0 {
		return LoginByPasswordRequestMultiError(errors)
	}

	return nil
}

// LoginByPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by LoginByPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginByPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordRequestMultiError) AllErrors() []error { return m }

// LoginByPasswordRequestValidationError is the validation error returned by
// LoginByPasswordRequest.Validate if the designated constraints aren't met.
type LoginByPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordRequestValidationError) ErrorName() string {
	return "LoginByPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordRequestValidationError{}

// Validate checks the field values on LoginByPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordReplyMultiError, or nil if none found.
func (m *LoginByPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginByPasswordReplyMultiError(errors)
	}

	return nil
}

// LoginByPasswordReplyMultiError is an error wrapping multiple validation
// errors returned by LoginByPasswordReply.ValidateAll() if the designated
// constraints aren't met.
type LoginByPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordReplyMultiError) AllErrors() []error { return m }

// LoginByPasswordReplyValidationError is the validation error returned by
// LoginByPasswordReply.Validate if the designated constraints aren't met.
type LoginByPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordReplyValidationError) ErrorName() string {
	return "LoginByPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordReplyValidationError{}
