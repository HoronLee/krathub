// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package userv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户未找到
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 用户未找到
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 删除用户失败
func IsDeleteUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_USER_FAILED.String() && e.Code == 500
}

// 删除用户失败
func ErrorDeleteUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

// 更新用户信息失败
func IsUpdateUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_USER_FAILED.String() && e.Code == 500
}

// 更新用户信息失败
func ErrorUpdateUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

// 保存用户信息失败
func IsSaveUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SAVE_USER_FAILED.String() && e.Code == 500
}

// 保存用户信息失败
func ErrorSaveUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SAVE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}
