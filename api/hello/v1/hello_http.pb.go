// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.0
// source: hello/v1/hello.proto

package hellov1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHelloServiceSayHello = "/hello.HelloService/SayHello"

type HelloServiceHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterHelloServiceHTTPServer(s *http.Server, srv HelloServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/hello/HelloTest", _HelloService_SayHello0_HTTP_Handler(srv))
}

func _HelloService_SayHello0_HTTP_Handler(srv HelloServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHelloServiceSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResponse)
		return ctx.Result(200, reply)
	}
}

type HelloServiceHTTPClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloResponse, err error)
}

type HelloServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewHelloServiceHTTPClient(client *http.Client) HelloServiceHTTPClient {
	return &HelloServiceHTTPClientImpl{client}
}

func (c *HelloServiceHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloResponse, error) {
	var out HelloResponse
	pattern := "/v1/hello/HelloTest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHelloServiceSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
